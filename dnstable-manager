#!/usr/bin/python

import argparse
import logging
import logging.handlers
import signal
import sys
import time
import urllib2

from dnstable_manager.fileset import relative_uri
from dnstable_manager.download import DownloadManager
from dnstable_manager import DNSTableManager, get_config
import dnstable_manager.https
import dnstable_manager.rsync

# time.strptime has a threading bug because it imports something
# an attribute error is raised if two threads call it before that other
# module has been loaded
time.strptime('','')

def exit_handler(signum, frame):
    sys.exit(signum)

def main():
    signal.signal(signal.SIGTERM, exit_handler)

    parser = argparse.ArgumentParser(
            description='Maintains local copies of remote filesets.  Supports http, https, ftp, file, rsync, rsync+rsh uri schemas.')
    parser.add_argument('--config', help='Path to configuration file.')
    parser.add_argument('--verbosity', '-v', action='count', 
            help='Verbosity level.  Repeat to increase.')
    parser.add_argument('--disable-unlink', action='store_true',
            help='Disable unlinking of files.')
    args = parser.parse_args()

    config = get_config(filename=args.config)

    logger = logging.getLogger('dnstable_manager')

    if not args.verbosity:
        logger.setLevel(config['manager']['log_level'])
    elif args.verbosity == 1:
        logger.setLevel(logging.WARNING)
    elif args.verbosity == 2:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.DEBUG)

    if args.disable_unlink:
        dnstable_manager.fileset.disable_unlink = True
        
    if logger.getEffectiveLevel() == logging.DEBUG:
        formatter = logging.Formatter('%(asctime)s %(name)s[%(lineno)d] %(levelname)s: %(message)s')
    else:
        formatter = logging.Formatter('%(asctime)s %(name)s: %(message)s')

    if 'log_stream' in config['manager']:
        handler = logging.StreamHandler(stream={
            'stderr' : sys.stderr,
            'stdout' : sys.stdout,
            }.get(config['manager']['log_stream'], 'stderr'))
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    if 'log_file' in config['manager']:
        handler = logging.handlers.WatchedFileHandler(config['manager']['log_file'])
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    if config['manager'].get('syslog', False):
        handler = logging.handlers.SysLogHandler(facility=config['manager'].get('syslog_facility', 'USER').lower())
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()
    auth_handler = urllib2.HTTPBasicAuthHandler(password_manager)
    https_handler = dnstable_manager.https.HTTPSHandler()
    rsync_handler = dnstable_manager.rsync.RsyncHandler(
            rsync_rsh=config['downloader']['rsync_rsh'],
            tmpdir=config['downloader']['tempdir'])
    opener = urllib2.build_opener(auth_handler, https_handler, rsync_handler)
    urllib2.install_opener(opener)

    dnstable_manager.https.ca_file = config['downloader']['ssl_ca_file']
    dnstable_manager.https.keyfile = config['downloader'].get('ssl_keyfile', None)
    dnstable_manager.https.certfile = config['downloader'].get('ssl_certfile', None)
    dnstable_manager.https.ciphers = config['downloader']['ssl_ciphers']

    download_manager = DownloadManager(
            max_downloads=config['downloader']['max_downloads'],
            retry_timeout=config['downloader']['retry_timeout'])

    fileset_managers = dict()

    for fileset,fileset_config in config['filesets'].items():
        password_manager.add_password(
                fileset_config.get('realm', None),
                relative_uri(fileset_config['uri'], ''),
                fileset_config.get('username', None),
                fileset_config.get('password', None))

        manager = DNSTableManager(
                fileset_uri=fileset_config['uri'],
                destination=fileset_config['destination'],
                base=fileset_config['base'],
                extension=fileset_config['extension'],
                frequency=fileset_config['frequency'],
                validator=fileset_config.get('validator', None),
                download_manager = download_manager)
        fileset_managers[fileset] = manager
        manager.start()

    download_manager.start()

    for manager in fileset_managers.values():
        manager.join()

    download_manager.join()

if __name__ == '__main__':
    main()
