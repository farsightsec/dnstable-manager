#!/usr/bin/python

import argparse
import logging
import logging.handlers
import signal
import sys
import time

import daemon
from dnstable_manager.download import DownloadManager
from dnstable_manager import DNSTableManager, get_config
import dnstable_manager.rsync

# time.strptime has a threading bug because it imports something
# an attribute error is raised if two threads call it before that other
# module has been loaded
time.strptime('','')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config')
    parser.add_argument('--verbosity', '-v', action='count')
    args = parser.parse_args()

    config = get_config(filename=args.config)

    logger = logging.getLogger('dnstable_manager')

    if not args.verbosity:
        logger.setLevel(config['manager']['log_level'])
    elif args.verbosity == 1:
        logger.setLevel(logging.WARNING)
    elif args.verbosity == 2:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.DEBUG)
        
    if logger.getEffectiveLevel() == logging.DEBUG:
        formatter = logging.Formatter('%(asctime)s %(name)s[%(lineno)d] %(levelname)s: %(message)s')
    else:
        formatter = logging.Formatter('%(asctime)s %(name)s: %(message)s')

    files_preserve = []

    if 'log_stream' in config['manager']:
        handler = logging.StreamHandler(stream={
            'stderr' : sys.stderr,
            'stdout' : sys.stdout,
            }.get(config['manager']['log_stream'], 'stderr'))
        handler.setFormatter(formatter)
        files_preserve.append(handler.stream.fileno())
        logger.addHandler(handler)

    if 'log_file' in config['manager']:
        handler = logging.handlers.WatchedFileHandler(config['manager']['log_file'])
        handler.setFormatter(formatter)
        files_preserve.append(handler.stream.fileno())
        logger.addHandler(handler)

    if config['manager'].get('syslog', False):
        handler = logging.handlers.SysLogHandler(facility=config['manager'].get('syslog_facility', 'USER').lower())
        handler.setFormatter(formatter)
        files_preserve.append(handler.socket.fileno())
        logger.addHandler(handler)

    if config['manager']['daemon']:
        logger.debug('Daemonizing')
        with daemon.DaemonContext(files_preserve=files_preserve):
            run(config)
    else:
        run(config)

def run(config):
    dnstable_manager.rsync.install(
            rsync_rsh=config['downloader']['rsync_rsh'],
            tmpdir=config['downloader']['tempdir'])
    download_manager = DownloadManager(
            max_downloads=config['downloader']['max_downloads'],
            retry_timeout=config['downloader']['retry_timeout'])

    fileset_managers = dict()

    for fileset,fileset_config in config['filesets'].items():
        manager = DNSTableManager(
                fileset_uri=fileset_config['uri'],
                destination=fileset_config['destination'],
                base=fileset_config['base'],
                extension=fileset_config['extension'],
                frequency=fileset_config['frequency'],
                download_manager = download_manager)
        fileset_managers[fileset] = manager
        manager.start()

    download_manager.start()

    for manager in fileset_managers.values():
        manager.join()

    download_manager.join()

if __name__ == '__main__':
    main()
